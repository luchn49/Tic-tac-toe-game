{"version":3,"sources":["components/SelectSide.jsx","components/PlayAgain.jsx","components/Square.jsx","components/Board.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["SelectSide","onChoose","e","props","onSelectSide","target","innerHTML","className","id","style","display","this","isSelectSide","onClick","Component","PlayAgain","onHandleAgain","onPlayAgain","gameEnd","winner","Square","getIndex","onHandleClick","children","Board","checkWinner","board","state","winLines","i","length","a","b","c","getWinner","isFinish","setState","Array","fill","index","newBoard","player","renderSquare","map","item","key","nextProps","prevState","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da651a3f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class SelectSide extends Component {\r\n  onChoose = e => {\r\n    this.props.onSelectSide(e.target.innerHTML)\r\n  };\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"selectPlayer\"\r\n        id=\"selectMenu\"\r\n        style={{ display: this.props.isSelectSide ? \"none\" : \"block\" }}\r\n      >\r\n        <p>Choose side:</p>\r\n        <div className=\"sides\">\r\n          <div className=\"chooseSide\" onClick={this.onChoose}>\r\n            X\r\n          </div>\r\n          <div className=\"chooseSide\" onClick={this.onChoose}>\r\n            O\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class PlayAgain extends Component {\r\n  onHandleAgain = () => {\r\n    this.props.onPlayAgain();\r\n  };\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"gameEnd\"\r\n        id=\"gameEndMenu\"\r\n        style={{ display: this.props.gameEnd ? \"block\" : \"none\" }}\r\n      >\r\n        <h1>\r\n          {!this.props.winner\r\n            ? \"Draw\"\r\n            : this.props.winner === \"X\"\r\n            ? \"Player X win\"\r\n            : \"Play O win\"}\r\n        </h1>\r\n        <button className=\"replay\" onClick={this.onHandleAgain}>\r\n          Play again?\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Square extends Component {\r\n  getIndex = (e) => {\r\n    this.props.onHandleClick(e.target.id);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"square\" id = {this.props.id} onClick={this.getIndex}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      board: Array(9).fill(null),\r\n      player: null\r\n    };\r\n  }\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (!prevState.player && !(nextProps.player === prevState.player)) {\r\n      return {\r\n        player: nextProps.player\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n  checkWinner = () => {\r\n    let { board } = this.state;\r\n    const winLines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < winLines.length; i++) {\r\n      const [a, b, c] = winLines[i];\r\n      if (board[a] && board[a] === board[b] && board[b] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  getWinner = () => {\r\n    const winner = this.checkWinner();\r\n    const isFinish = this.isFinish(this.state.board);\r\n    if (winner || isFinish) {\r\n      this.props.getWinner(winner);\r\n      this.setState({\r\n        board: Array(9).fill(null)\r\n      });\r\n    } else if (!winner && isFinish) {\r\n      this.props.getWinner(winner);\r\n      this.setState({\r\n        board: Array(9).fill(null)\r\n      });\r\n    }\r\n  };\r\n  isFinish = board => {\r\n    for (let i in board) {\r\n      if (!board[i]) return false;\r\n    }\r\n    return true;\r\n  };\r\n  onHandleClick = index => {\r\n    let newBoard = this.state.board;\r\n    if (newBoard[index] === null) {\r\n      newBoard[index] = this.state.player;\r\n      this.setState({\r\n        board: newBoard,\r\n        player: this.state.player === \"X\" ? \"O\" : \"X\"\r\n      });\r\n    }\r\n    this.getWinner();\r\n  };\r\n  renderSquare = () => {\r\n    return this.state.board.map((item, index) => (\r\n      <Square key={index} onHandleClick={this.onHandleClick} id={index}>\r\n        {item}\r\n      </Square>\r\n    ));\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board\">{this.renderSquare()}</div> \r\n    <p className = \"nextPlayer\">next player is: {this.state.player}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport SelectSide from \"./SelectSide\";\r\nimport PlayAgain from \"./PlayAgain\";\r\nimport Board from \"./Board\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isSelectSide: false,\r\n      player: null,\r\n      gameEnd: false,\r\n      winner: null\r\n    };\r\n  }\r\n  onSelectSide = player => {\r\n    this.setState({\r\n      isSelectSide: !this.state.isSelectSide,\r\n      player\r\n    });\r\n  };\r\n  onPlayAgain = () => {\r\n    this.setState({\r\n      gameEnd: false\r\n    });\r\n  };\r\n  getWinner = winner => {\r\n    this.setState({\r\n      winner,\r\n      gameEnd: true\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SelectSide\r\n          isSelectSide={this.state.isSelectSide}\r\n          onSelectSide={this.onSelectSide}\r\n        />\r\n        <Board player={this.state.player} getWinner={this.getWinner} />\r\n        <PlayAgain\r\n          gameEnd={this.state.gameEnd}\r\n          onPlayAgain={this.onPlayAgain}\r\n          winner={this.state.winner}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}